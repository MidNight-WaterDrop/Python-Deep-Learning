import os
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import tensorflow as tf
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.metrics import roc_curve, auc
from imblearn.over_sampling import SMOTE
import plotly.offline as py
import plotly.graph_objs as go
from tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau

# Initialize Plotly Notebook Mode
py.init_notebook_mode(connected=True)

# Constants
FILE_NAME = "pima-indians-diabetes.csv"
COLUMNS = ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 'Insulin',
           'BMI', 'DiabetesPedigreeFunction', 'Age', 'Class']

# Function to Load and Preprocess Data
def load_and_preprocess_data():
    os.chdir(DATA_PATH)
    df = pd.read_csv(FILE_NAME, header=None, names=COLUMNS)
    df[['Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI']] = df[
        ['Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI']].replace(0, np.nan)
    df.fillna(df.median(), inplace=True)
    return df

# Function to Standardize Data
def standardize_data(df):
    scaler = StandardScaler()
    X = df.drop('Class', axis=1)
    y = df['Class']
    X_scaled = scaler.fit_transform(X)
    return pd.DataFrame(X_scaled, columns=X.columns), y

# Function to Split Data
def split_data(X, y):
    return train_test_split(X, y, test_size=0.25, random_state=42)

# Function to Build Neural Network
def build_model(input_dim, neurons=[12], dropout=None, activation='relu', optimizer='adam'):
    model = tf.keras.Sequential()
    for i, n in enumerate(neurons):
        if i == 0:
            model.add(tf.keras.layers.Dense(n, input_shape=(input_dim,), activation=activation))
        else:
            model.add(tf.keras.layers.Dense(n, activation=activation))
        if dropout:
            model.add(tf.keras.layers.Dropout(dropout))
    model.add(tf.keras.layers.Dense(1, activation='sigmoid'))
    model.compile(optimizer=optimizer, loss='binary_crossentropy', metrics=['accuracy'])
    return model

# Function to Train and Evaluate Model
def train_model(model, X_train, y_train, X_test, y_test, batch_size=128, epochs=50):
    early_stopping = EarlyStopping(monitor='val_loss', patience=10, restore_best_weights=True)
    reduce_lr = ReduceLROnPlateau(monitor='val_loss', factor=0.2, patience=5, min_lr=0.0001)
    history = model.fit(
        X_train, y_train, epochs=epochs, batch_size=batch_size,
        validation_data=(X_test, y_test), verbose=1, callbacks=[early_stopping, reduce_lr]
    )
    return history

# Function to Plot ROC Curve
def plot_roc_curve(model, X_test, y_test, title):
    y_pred = model.predict(X_test).ravel()
    fpr, tpr, _ = roc_curve(y_test, y_pred)
    roc_auc = auc(fpr, tpr)
    plt.figure()
    plt.plot(fpr, tpr, label=f'{title} (AUC = {roc_auc:.2f})')
    plt.plot([0, 1], [0, 1], 'k--')
    plt.xlabel('False Positive Rate')
    plt.ylabel('True Positive Rate')
    plt.title('ROC Curve')
    plt.legend()
    plt.show()

if __name__ == "__main__":
    # Load and preprocess data
    df = load_and_preprocess_data()
    X, y = standardize_data(df)
    X_train, X_test, y_train, y_test = split_data(X, y)
    
    # Build and train baseline model
    model = build_model(X_train.shape[1], neurons=[12])
    history = train_model(model, X_train, y_train, X_test, y_test)
    plot_roc_curve(model, X_test, y_test, "Baseline Model")
    
    # Build and train optimized model with dropout and more neurons
    model_opt = build_model(X_train.shape[1], neurons=[64, 32], dropout=0.5, activation='tanh')
    history_opt = train_model(model_opt, X_train, y_train, X_test, y_test)
    plot_roc_curve(model_opt, X_test, y_test, "Optimized Model")
    
    # Apply SMOTE to handle imbalanced data
    smote = SMOTE(random_state=42)
    X_train_smote, y_train_smote = smote.fit_resample(X_train, y_train)
    
    # Train model on SMOTE-balanced data
    model_smote = build_model(X_train_smote.shape[1], neurons=[12, 8], dropout=0.2)
    history_smote = train_model(model_smote, X_train_smote, y_train_smote, X_test, y_test)
    plot_roc_curve(model_smote, X_test, y_test, "SMOTE Model")
